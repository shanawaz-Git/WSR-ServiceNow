<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>global.Attachment</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>Attachment</name>
        <script><![CDATA[var Attachment = Class.create();
Attachment.prototype = {

    ATTACHMENT_INDEXED: 'attachment_index',
    ATTACHMENT_EXTRACTOR: 'attachment_extractor',
    ATTACHMENT_EXTENSION: 'extension',

    initialize: function() {
        this.attachment = null;
    },
    setRecord: function(attachment) {
        this.attachment = attachment;
    },

    isIndexed: function() {
        if (this.attachment == null)
            return false;

        var gr = new GlideRecord(this.getTable());
        gr.initialize();
        if (!gr.isValid())
            return false;

        if (!gr.getED().getBooleanAttribute(this.ATTACHMENT_INDEXED))
            return false;

        if (!this._indexedType())
            return false;

        return true;
    },

    getTable: function() {
        return this.attachment.table_name.toString();
    },

    getTableID: function() {
        return this.attachment.table_sys_id.toString();
    },

    getTarget: function() {
        var gr = new GlideRecord(this.getTable());
        gr.get(this.getTableID());
        return gr;
    },

    getTerms: function(id) {
        var att = new GlideAttachmentIndexDocument(id);
        return att.getTerms(true);
    },

    _indexedType: function() {
        if (this.attachment == null)
            return false;

        var type = this.getType();
        return GlideAttachmentIndexTypes.isIndexed(type);
    },

    getType: function() {
        var att_name = this.attachment.file_name.toString();
        var att_parts = att_name.split(".");
        return att_parts[att_parts.length - 1].toLowerCase();
    },

    setTargetTable: function(name) {
        this.tablename = name;
    },

    setTargetID: function(id) {
        this.targetID = id;
    },

    setTarget: function(gr) {
        this.target = gr;
    },

    setFilename: function(name) {
        this.filename = name;
    },

    setContentType: function(type) {
        this.contentType = type;
    },

    setValue: function(val) {
        this.value = val;
    },

    attach: function() {
        if (this.target == null) {
            //build target via gliderecord call
            if (this.tablename == null || this.targetID == null)
                return "Table name and/or target sys id are null. Please specify valid parameters.";
            var targetRecord = new GlideRecord(this.tablename);
            if (!targetRecord.get(this.targetID))
                return "Could not find a record in table '" + this.tablename + "' with sys_id '" + this.targetID + "'";
            this.setTarget(targetRecord);
        }

        var sa = new GlideSysAttachment();
        var attachmentId = sa.write(this.target, this.filename, this.contentType, this.value);
        if (attachmentId)
            return "Attachment created and attached to '" + this.tablename + "' record with sys_id: '" + this.targetID + "'";
        else
            return "Attachment creation failed";
    },

    write: function(gr, filename, content_type, value) {
        this.setTarget(gr);
        this.setFilename(filename);
        this.setContentType(content_type);
        this.setValue(value);
        return this.attach();
    },

    write: function(name, id, filename, content_type, value) {
        this.setTargetTable(name);
        this.setTargetID(id);
        this.setFilename(filename);
        this.setContentType(content_type);
        this.setValue(value);
        return this.attach();
    },

    type: 'Attachment'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-03-04 14:58:00</sys_created_on>
        <sys_id>f24092f6db5de110cb16b7e8f49619af</sys_id>
        <sys_mod_count>2</sys_mod_count>
        <sys_name>Attachment</sys_name>
        <sys_package display_value="Global" source="global">global</sys_package>
        <sys_policy/>
        <sys_scope display_value="WSR ServiceNow">10e0d39a4729711098d341fe436d43af</sys_scope>
        <sys_update_name>sys_script_include_f24092f6db5de110cb16b7e8f49619af</sys_update_name>
        <sys_updated_by>shanawaz</sys_updated_by>
        <sys_updated_on>2023-12-22 11:56:02</sys_updated_on>
    </sys_script_include>
    <sys_claim action="INSERT_OR_UPDATE">
        <claim_owner_scope display_value="WSR ServiceNow">10e0d39a4729711098d341fe436d43af</claim_owner_scope>
        <claim_timestamp>18c9161e8d80000001</claim_timestamp>
        <metadata_update_name>sys_script_include_f24092f6db5de110cb16b7e8f49619af</metadata_update_name>
        <previous_claim_app_version>1.0.0</previous_claim_app_version>
        <previous_claim_name>WSR ServiceNow</previous_claim_name>
        <previous_claim_scope>10e0d39a4729711098d341fe436d43af</previous_claim_scope>
        <sys_created_by>shanawaz</sys_created_by>
        <sys_created_on>2023-12-22 11:56:02</sys_created_on>
        <sys_id>0c90e6c5475f351098d341fe436d4360</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>shanawaz</sys_updated_by>
        <sys_updated_on>2023-12-22 11:56:02</sys_updated_on>
    </sys_claim>
</record_update>
